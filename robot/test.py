'''
Naruda: 2019-1 AJOU Univ. major of Software department Capstone project
Robot main firmware made by "Park Jun-Hyuk" (github nickname 'BrightBurningPark').

Robot can drive by itself, localize position and direction in given map.
it can also build the map from zero.

I Love my school and the Capstone Program SO MUCH. it's true story ^^.
'''
# python basic or pip-installed library import
import sys
import math
import time
import threading

# adding ./lib dir to use modules
import sys
sys.path.append('./lib')
# modules under lib directory
import ntdriver         # network driver
import pathengine       # shortest path finding engine
import rpslam           # BreezySLAM(tinySLAM Implementation) with RPLidar A1

# General variables like Path, Var, Name, etc...
PATH_ROBOT = "/home/odroid/capdi/robot" # robot SW top path
PATH_MAP = PATH_ROBOT + "/maps"          # map directory
PATH_LIB = PATH_ROBOT + "/lib"          # libraries
MAP_NAME_NO_SLAM = 'MAP_NO_SLAM.png'    # map name generated by no_map_slam
MAP_NAME_YES_SLAM = 'MAP_YES_SLAM.png'  # map name pre-drawn

# flag_slam_yn = None # this variable is under the __main__ code


def testcode():
    # test code : manual serial input testing
    print('current position / ', narslam.x, narslam.y)
    #dest_x = narslam.x + 1000
    #dest_y = narslam.y + 1000
    dest_x = int(input('x>> '))
    dest_y = int(input('y>> '))

    while math.hypot(dest_x - narslam.x, dest_y - narslam.y) > 10:
        print('while entered')
        dx = dest_x - narslam.x
        dy = dest_y - narslam.y
        if abs(dx) < 50:
            dx = 0
        if abs(dy) < 50:
            dy = 0

        rad = math.atan2(dx, dy)
        deg = math.degrees(rad)
        print(deg, ' / ', narslam.theta)
        if deg > narslam.theta + 10:
            nxt.send(ntdriver.RIGHT)
        elif deg < narslam.theta-10:
            nxt.send(ntdriver.LEFT)
        else:
            nxt.send(ntdriver.FORWARD)
        time.sleep(0.1)
    nxt.send(ntdriver.STOP)
    print('arrived to destination')

    print("done")
    print(narslam.x, narslam.y, narslam.theta)


def drive_through_rally(start, goal):
    print('starting from start')
    for rp in navi.path_rally:
        dx = rp[0]-narslam.x
        dy = rp[1]-narslam.y
        while math.hypot(dx, dy) <= 10:
            rad = math.atan(dy/dx)
            deg = rad*(180/math.pi)
            if deg > -(narslam.theta-10):
                nxt.send(RIGHT)
            elif deg < -(narslam.theta+10):
                nxt.send(LEFT)
            else:
                nxt.send(FORWARD)
        nxt.send(STOP)
    print('arrived to destination')

def handle_request(path_map_name):
    #TODO: code for handling request. request stored in server instance
    # request has 3 args: 
    #       1. destination 1 (x1, y1)
    #       2. destination 2 (x2m y2)
    #       3. request Authentification pattern(4-length pattern consists of A, B, C -> used to lock the cargo)
    
    # start position -> destination 1
    navi.search(path_map_name, (narslam.x, narslam.y), ser.req[0])
    navi.extract_rally()
    drive_through_rally()
            
    # destination 1 -> destination 2
    navi.search(path_map_name, (narslam.x, narslam.y), ser.req[1])
    navi.extract_rally()
    drive_through_rally()

def connect_all():
    # connecting functions comes here. there should be exception handling, but i have no time.
    nxt.connect()


if __name__ == "__main__":
    print ('firmware started')
    
    nxt         = ntdriver.lego_nxt()
    navi        = pathengine.navigation()
    narslam     = rpslam.narlam()
    print('instances generated successfully from the library modules')

    connect_all()
    print('all connection established')

    flag_slam_yn = input('select SLAM mode (y: do slam with pre-set map / n: do real SLAM) >> ')
    if flag_slam_yn == 'y':
        #TODO: do yes map slam
        path_map_name = PATH_MAP + '/' + MAP_NAME_YES_SLAM
        t_slam = threading.Thread(target=narslam.slam_yes_map, args=(path_map_name,))
    elif flag_slam_yn == 'n':
        #TODO: do no map slam
        path_map_name = PATH_MAP + '/' + MAP_NAME_NO_SLAM
        t_slam = threading.Thread(target=narslam.slam_no_map, args=(path_map_name,))
    else:
        print('error: invalid selection')
        sys.exit(-1)
    t_slam.start()
    print('SLAM now operating in background')

    while(1):
        if not narslam.viz.display(narslam.x/1000, narslam.y/1000, narslam.theta, narslam.mapbytes):
            exit(0)
        cmd = input("please give me order\n(\"goto\": run testcode|1,2,3,4,5: move)\n>> ")
        if cmd == 'goto':
            testcode()
            print('testcode done')
        else:
            nxt.send(int(cmd))
        print('loop success!')

        
